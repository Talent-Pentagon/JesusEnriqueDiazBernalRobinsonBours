[{
  "test_module": "001",
  "language": "c",
  "category": "math",
  "description": "Multiply two integers.",
  "filename": "001.c",
  "code": [
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"%d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}\n13:c-",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}\n12:c-",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"%d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}"
  ]
}
,
{
  "test_module": "002",
  "language": "cpp",
  "category": "math",
  "description": "Add two integers.",
  "filename": "002.cpp",
  "code": [
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount()\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() { return count; }\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() { return count; }\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() {\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() {\\n        return count; {\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}"
  ]
}
,
{
  "test_module": "003",
  "language": "java",
  "category": "math",
  "description": "003 Subtract two integers.",
  "filename": "Counter.java",
  "code": [
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++\n11:count++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(c.getCount());\n    }\n}\n=++\n11:count++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++",
    "package Tests.java;\n\npublic class Counter {\n    private int count;\n\n    public Counter() {\n        count = 0;\n    }\n\n    public void increment() {\n        count = 0;\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Counter c = new Counter();\n        c.increment();\n        c.increment();\n        System.out.println(\"Count: \" + c.getCount());\n    }\n}\n=++"
  ]
}
,
{
  "test_module": "004",
  "language": "c",
  "category": "Structs and functions",
  "description": "Create an object and print its value.",
  "filename": "004.c",
  "code": [
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Object {\n    int x;\n    void (*print)(Object*);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object obj) {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(int x) {\n    printf(\"x = %d\\n\", x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print(obj.x);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) { {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(int x) {\n    printf(\"%d\\n\", x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print(obj.x);\n    return 0;\n}"
  ]
}
,
{
  "test_module": "005",
  "language": "cpp",
  "category": "Encapsulation",
  "description": "Implements a simple class to demonstrate encapsulation.",
  "filename": "005.cpp",
  "code": [
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(\"default\");\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n    model = m;\\n}\\n\\nCar() {}\\n\\n    Car() {}\\n\\nCar() {}\\n\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c;\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}"
  ]
},
{
  "test_module": "006",
  "language": "java",
  "category": "math",
  "description": "Description",
  "filename": "Main.java",
  "code": [
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\\n        super(name);\\n        System.out.println(name + \" says woof\");\\n\\n\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\\n        super(name);\\n        System.out.println(name + \" says woof\");\\n\\n\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
    "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}"
  ]
}
]