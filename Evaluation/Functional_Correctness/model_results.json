[{
  "test_module": "001",
  "language": "c",
  "category": "math",
  "description": "Multiply two integers.",
  "filename": "001.c",
  "code": [
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"%d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}\n13:c-",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}\n12:c-",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"%d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}"
  ]
}
,
{
  "test_module": "002",
  "language": "cpp",
  "category": "math",
  "description": "Add two integers.",
  "filename": "002.cpp",
  "code": [
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount()\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << 2 << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() { return count; }\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() { return count; }\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() {\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() return count;\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Counter\n{\nprivate:\n    int count;\n\npublic:\n    Counter()\n    {\n        count = 0;\n    }\n\n    void increment()\n    {\n        count++;\n    }\n\n    int getCount() {\\n        return count; {\n    {\n        count = 0;\n        return count;\n    }\n};\n\nint main()\n{\n    Counter c;\n    c.increment();\n    c.increment();\n    cout << \"Count: \" << c.getCount() << endl;\n    return 0;\n}"
  ]
}
,
{
  "test_module": "043",
  "language": "c",
  "category": "NA",
  "description": "Description",
  "filename": "043.c",
  "code": [
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct Item {\n    char name[30];\n    int quantity;\n} Item;\n\ntypedef struct Inventory {\n    Item* items;\n    int size;\n    int capacity;\n    void (*add)(struct Inventory*, const char*, int);\n    void (*restock)(struct Inventory*, const char*, int);\n} Inventory;\n\nvoid addItem(Inventory* inv, const char* name, int qty) {\n    for (int i = 0; i < inv->size; i++) {\n        if (strcmp(inv->items[i].name, name) == 0) {\n            inv->items[i].quantity += qty;\n            return;\n        }\n    }\n    if (inv->size == inv->capacity) {\n        inv->capacity = (inv->capacity == 0) ? 2 : inv->capacity * 2;\n        inv->items = realloc(inv->items, inv->capacity * sizeof(Item));\n    }\n    strncpy(inv->items[inv->size].name, name, sizeof(inv->items[inv->size].name) - 1);\n    inv->items[inv->size].name[sizeof(inv->items[inv->size].name) - 1] = '\\0';\n    inv->items[inv->size].quantity = qty;\n    inv->size++;\n}\n\nvoid restockItem(Inventory* inv, const char* name, int qty) {\n    for (int i = 0; i < inv->size; i++) {\n        if (strcmp(inv->items[i].name, name) == 0) {\n            inv->items[i].quantity += qty;\n            return;\n        }\n    }\n    addItem(inv, name, qty);\n}\n\nint getItemQuantity(Inventory* inv, const char* name) {\n    for (int i = 0; i < inv->size; i++) {\n        if (strcmp(inv->items[i].name, name) == 0) {\n            return inv->items[i].quantity;\n        }\n    }\n    return -1;\n}\n\nInventory createInventory() {\n    Inventory inv = {NULL, 0, 0, addItem, restockItem};\n    return inv;\n}\n\nvoid destroyInventory(Inventory* inv) {\n    free(inv->items);\n    inv->items = NULL;\n    inv->size = 0;\n    inv->capacity = 0;\n}\n\nint main() {\n    Inventory inv = createInventory();\n    char command[20];\n    char name[30];\n    int qty;\n\n    while (scanf(\"%s\", command) != EOF) {\n        if (strcmp(command, \"add\") == 0) {\n            scanf(\"%s %d\", name, &qty);\n            inv.add(&inv, name, qty);\n        } else if (strcmp(command, \"restock\") == 0) {\n            scanf(\"%s %d\", name, &qty);\n            inv.restock(&inv, name, qty);\n        } else if (strcmp(command, \"get\") == 0) {\n            scanf(\"%s\", name);\n            printf(\"%d\\n\", getItemQuantity(&inv, name));\n            fflush(stdout);\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        }\n    }\n\n    destroyInventory(&inv);\n    return 0;\n}"
  ] 
},
{
  "test_module": "005",
  "language": "cpp",
  "category": "Encapsulation",
  "description": "Implements a simple class to demonstrate encapsulation.",
  "filename": "005.cpp",
  "code": [
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(\"default\");\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n        model = m;\\n    }\\n\\n    Car() {}\\n\\n    model = m;\\n}\\n\\nCar() {}\\n\\n    Car() {}\\n\\nCar() {}\\n\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c;\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) : model(m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}",
    "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    Car c(argv[1]);\n    c.show();\n    return 0;\n}"
  ]
},
{
  "test_module": "004",
  "language": "c",
  "category": "Structs and functions",
  "description": "Create an object and print its value.",
  "filename": "004.c",
  "code": [
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Object {\n    int x;\n    void (*print)(Object*);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object obj) {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(int x) {\n    printf(\"x = %d\\n\", x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print(obj.x);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) { {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", obj->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", obj.x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(int x) {\n    printf(\"%d\\n\", x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print(obj.x);\n    return 0;\n}"
  ]
},
{
  "test_module": "Student",
  "language": "java",
  "category": "NA",
  "description": "Description",
  "filename": "Student.java",
  "code": [
    "class Student {\n    private String name;\n    private int[] grades;\n\n    public Student(String name, int[] grades) {\n        this.name = name;\n        this.grades = grades;\n    }\n\n    public double average() {\n        int sum = 0;\n        for (int grade : grades)\n            sum += grade;\n        return grades.length == 0 ? 0 : (double) sum / grades.length;\n    }\n\n    public void printInfo() {\n        System.out.printf(\"Student: %s, Average: %.2f%n\", name, average());\n    }\n\n    public static void main(String[] args) {\n        int[] grades = {90, 80, 70, 85};\n        Student student = new Student(\"Alice\", grades);\n        student.printInfo();\n    }\n}" ]
},
{
  "test_module": "Animals",
  "language": "java",
  "category": "NA",
  "description": "Description",
  "filename": "Animals.java",
  "code": [
   "class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\\n    public Dog(String name) {\\n        super(name);\\n    }\\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}"
  ]
}
]