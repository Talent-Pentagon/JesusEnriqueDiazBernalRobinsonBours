[
    {
        "test_module": "001",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "001.c",
        "code": [
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}"
        ]
    },
    {
        "test_module": "003",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "AccountLockoutChecker.java",
        "code": [
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}"
        ]
    },
    {
        "test_module": "004",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "004.c",
        "code": [
            "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", self->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", self->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", self->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", self->x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
            "  Timeout exceeded for run 5"
        ]
    },
    {
        "test_module": "005",
        "language": "cpp",
        "category": "NA",
        "description": "NA",
        "filename": "005.cpp",
        "code": [
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input = argv[1];\n    Car c(input);\n    c.show();\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input = argv[1];\n    Car c(input);\n    c.show();\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input = argv[1];\n    Car c(input);\n    c.show();\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input = argv[1];\n    Car c(input);\n    c.show();\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input = argv[1];\n    Car c(input);\n    c.show();\n    return 0;\n}"
        ]
    },
    {
        "test_module": "006",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "Animals.java",
        "code": [
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}"
        ]
    },
    {
        "test_module": "007",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "007.c",
        "code": [
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct BankAccount {\n    int accountNumber;\n    double balance;\n    void (*deposit)(struct BankAccount*, double);\n    void (*withdraw)(struct BankAccount*, double);\n    void (*print)(struct BankAccount*);\n} BankAccount;\n\nvoid deposit(BankAccount* acc, double amount) {\n    acc->balance += amount;\n}\n\nvoid withdraw(BankAccount* acc, double amount) {\n    if (acc->balance >= amount) {\n        acc->balance -= amount;\n    } else {\n        printf(\"Insufficient funds.\\n\");\n        fflush(stdout);\n    }\n}\n\nvoid print(BankAccount* acc) {\n    printf(\"Account #%d, Balance: %.2f\\n\", acc->accountNumber, acc->balance);\n    fflush(stdout);\n}\n\nBankAccount createAccount(int accountNumber, double initialBalance) {\n    BankAccount acc = {accountNumber, initialBalance, deposit, withdraw, print};\n    return acc;\n}\n\nint main() {\n    BankAccount acc = createAccount(12345, 100.0);\n    char command[20];\n    double amount;\n\n    while (scanf(\"%s\", command) != EOF) {\n        if (strcmp(command, \"deposit\") == 0) {\n\n            scanf(\"%lf\", &amount);\n            acc.deposit(&acc, amount);\n        } else if (strcmp(command, \"withdraw\") == 0) {\n            scanf(\"%lf\", &amount);\n            acc.withdraw(&acc, amount);\n        } else if (strcmp(command, \"print\") == 0) {\n            acc.print(&acc);\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        }\n\n    }\n\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct BankAccount {\n    int accountNumber;\n    double balance;\n    void (*deposit)(struct BankAccount*, double);\n    void (*withdraw)(struct BankAccount*, double);\n    void (*print)(struct BankAccount*);\n} BankAccount;\n\nvoid deposit(BankAccount* acc, double amount) {\n    acc->balance += amount;\n}\n\nvoid withdraw(BankAccount* acc, double amount) {\n    if (acc->balance >= amount) {\n        acc->balance -= amount;\n    } else {\n        printf(\"Insufficient funds.\\n\");\n        fflush(stdout);\n    }\n}\n\nvoid print(BankAccount* acc) {\n    printf(\"Account #%d, Balance: %.2f\\n\", acc->accountNumber, acc->balance);\n    fflush(stdout);\n}\n\nBankAccount createAccount(int accountNumber, double initialBalance) {\n    BankAccount acc = {accountNumber, initialBalance, deposit, withdraw, print};\n    return acc;\n}\n\nint main() {\n    BankAccount acc = createAccount(12345, 100.0);\n    char command[20];\n    double amount;\n\n    while (scanf(\"%s\", command) != EOF) {\n        if (strcmp(command, \"deposit\") == 0) {\n\n            scanf(\"%lf\", &amount);\n            acc.deposit(&acc, amount);\n        } else if (strcmp(command, \"withdraw\") == 0) {\n            scanf(\"%lf\", &amount);\n            acc.withdraw(&acc, amount);\n        } else if (strcmp(command, \"print\") == 0) {\n            acc.print(&acc);\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        }\n\n    }\n\n    return 0;\n}",
            "  Patch failed for run 3",
            "  Patch failed for run 4",
            "  Patch failed for run 5"
        ]
    },
    {
        "test_module": "008",
        "language": "cpp",
        "category": "NA",
        "description": "NA",
        "filename": "008.cpp",
        "code": [
            "  Patch failed for run 1",
            "  Patch failed for run 2",
            "  Patch failed for run 3",
            "  Patch failed for run 4",
            "  Patch failed for run 5"
        ]
    },
    {
        "test_module": "009",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "AuditLogger.java",
        "code": [
            "  Patch failed for run 1",
            "  Patch failed for run 2",
            "  Patch failed for run 3",
            "  Patch failed for run 4",
            "  Patch failed for run 5"
        ]
    },
    {
        "test_module": "010",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "010.c",
        "code": [
            "  Patch failed for run 1",
            "  Patch failed for run 2",
            "  Patch failed for run 3",
            "  Patch failed for run 4",
            "  Patch failed for run 5"
        ]
    },
    {
        "test_module": "011",
        "language": "cpp",
        "category": "NA",
        "description": "NA",
        "filename": "011.cpp",
        "code": [
            "  Patch failed for run 1",
            "  Patch failed for run 2",
            "  Patch failed for run 3",
            "  Patch failed for run 4",
            "  Patch failed for run 5"
        ]
    },
    {
        "test_module": "012",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "AuthenticationSystem.java",
        "code": [
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = \"password123\";\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return \\!username.isEmpty() && \\!password.isEmpty();\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = \"password123\";\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return \\!username.isEmpty() && \\!password.isEmpty();\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = \"password123\";\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return \\!username.isEmpty() && \\!password.isEmpty();\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = \"password123\";\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return \\!username.isEmpty() && \\!password.isEmpty();\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = \"password123\";\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return \\!username.isEmpty() && \\!password.isEmpty();\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}"
        ]
    }
]