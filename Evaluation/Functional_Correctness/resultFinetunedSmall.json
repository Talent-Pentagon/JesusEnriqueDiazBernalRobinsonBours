[
    {
        "test_module": "001",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "001.c",
        "code": [
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count++;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct\n{\n    int count;\n} Counter;\n\nvoid increment(Counter *c)\n{\n    c->count = c->count + 1;\n}\n\nint getCount(Counter *c)\n{\n    return c->count;\n}\n\nint main()\n{\n    Counter *myCounter = malloc(sizeof(Counter));\n    myCounter->count = 0;\n\n    increment(myCounter);\n    increment(myCounter);\n\n    printf(\"Count: %d\\n\", getCount(myCounter));\n    free(myCounter);\n    return 0;\n}"
        ]
    },
    {
        "test_module": "003",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "AccountLockoutChecker.java",
        "code": [
            "  Timeout exceeded for run 1",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\\n        if (count < 0) {\\n            System.out.println(\"FailureCount must be a non-negative integer.\");\\n            return;\\n        }\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}",
            "  Timeout exceeded for run 3",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\\n        if (count < 0) {\\n            System.out.println(\"FailureCount must be a non-negative integer.\");\\n            return;\\n        }\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}",
            "// Filename: AccountLockoutChecker.java\n\nclass LoginAttempt {\n    String username;\n    int failures;\n\n    public LoginAttempt(String username, int failures) {\n        this.username = username;\n        this.failures = failures;\n    }\n}\n\nclass LockoutChecker extends LoginAttempt {\n    public LockoutChecker(String username, int failures) {\n        super(username, failures);\n    }\n\n    public boolean isLocked() {\n        return failures >= 3;\n    }\n}\n\npublic class AccountLockoutChecker {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AccountLockoutChecker <username> <failureCount>\");\n            return;\n        }\n        String user = args[0];\n        int count;\n        try {\n            count = Integer.parseInt(args[1]);\\n        if (count < 0) {\\n            System.out.println(\"FailureCount must be a non-negative integer.\");\\n            return;\\n        }\n        } catch (NumberFormatException e) {\n            System.out.println(\"FailureCount must be an integer.\");\n            return;\n        }\n        LockoutChecker lockout = new LockoutChecker(user, count);\n        System.out.println(lockout.isLocked() ? \"Locked\" : \"Active\");\n    }\n}"
        ]
    },
    {
        "test_module": "004",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "004.c",
        "code": [
            "  Timeout exceeded for run 1",
            "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(Object *obj);\n} Object;\n\nvoid printObject() {\n    printf(\"x = %d\\n\", x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print(&obj)\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x;\n    void (*print)(void);\n} Object;\n\nvoid printObject(Object *obj) {\n    printf(\"x = %d\\n\", x);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) return 1;\n    int value = atoi(argv[1]);\n    Object obj = {value, printObject};\n    obj.print();\n    return 0;\n}",
            "  Timeout exceeded for run 4",
            "  Timeout exceeded for run 5"
        ]
    },
    {
        "test_module": "005",
        "language": "cpp",
        "category": "NA",
        "description": "NA",
        "filename": "005.cpp",
        "code": [
            "  Timeout exceeded for run 1",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input = (argc > 1) ? argv[1] : \"\";\n    Car c(input);\n    c.show();\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    string input;\\n    if (argc > 1) { input = argv[1]; } else { cout << \"Error: No command-line argument provided.\" << endl; return 1; }\n    Car c(input);\n    c.show();\n    return 0;\n}",
            "  Timeout exceeded for run 4",
            "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << \"Model: \" << model << endl;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    if (argc >= 2) { string input = argv[1]; } else { cout << \"Error: No argument provided.\" << endl; return 1; }\n    Car c(input);\n    c.show();\n    return 0;\n}"
        ]
    },
    {
        "test_module": "006",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "Animals.java",
        "code": [
            "  Timeout exceeded for run 1",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Default\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : (args[0].isEmpty() ? \"Default\" : args[0]);\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : (args[0].isEmpty() ? \"Unnamed\" : \"Default\");\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}",
            "public class Animal {\n    String name;\n\n    public Animal(String name) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        super(name);\n    }\n\n    void bark() {\n        System.out.println(name + \" says woof\");\n    }\n}\n\npublic class Animals {\n    public static void main(String[] args) {\n        String name = args.length > 0 ? args[0] : \"Anonymous\";\n        Dog d = new Dog(name);\n        d.bark();\n    }\n}"
        ]
    },
    {
        "test_module": "007",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "007.c",
        "code": [
            "  Timeout exceeded for run 1",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct BankAccount {\n    int accountNumber;\n    double balance;\n    void (*deposit)(struct BankAccount*, double);\n    void (*withdraw)(struct BankAccount*, double);\n    void (*print)(struct BankAccount*);\n} BankAccount;\n\nvoid deposit(BankAccount* acc, double amount) {\n    acc->balance += amount;\n}\n\nvoid withdraw(BankAccount* acc, double amount) {\n    if (acc->balance >= amount) {\n        acc->balance -= amount;\n    } else {\n        printf(\"Insufficient funds.\\n\");\n        fflush(stdout);\n    }\n}\n\nvoid print(BankAccount* acc) {\n    printf(\"Account #%d, Balance: %.2f\\n\", acc->accountNumber, acc->balance);\n    fflush(stdout);\n}\n\nBankAccount createAccount(int accountNumber, double initialBalance) {\n    BankAccount acc = {accountNumber, initialBalance, deposit, withdraw, print};\n    return acc;\n}\n\nint main() {\n    BankAccount acc = createAccount(12345, 100.0);\n    char command[20];\n    double amount;\n\n    while (scanf(\"%s\", command) != EOF) {\n        if (strcmp(command, \"deposit\") == 0) {\n\n            scanf(\"%lf\", &amount);\n            acc.deposit(&acc, amount);\n        } else if (strcmp(command, \"withdraw\") == 0) {\n            scanf(\"%lf\", &amount);\n            acc.withdraw(&acc, amount);\n        } else if (strcmp(command, \"print\") == 0) {\n            acc.print(&acc);\n        } else if (strcmp(command, \"exit\") == 0) { break; } else { printf(\"Unknown command: %s\\n\", command); continue; } {\n            break;\n        }\n\n    }\n\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct BankAccount {\n    int accountNumber;\n    double balance;\n    void (*deposit)(struct BankAccount*, double);\n    void (*withdraw)(struct BankAccount*, double);\n    void (*print)(struct BankAccount*);\n} BankAccount;\n\nvoid deposit(BankAccount* acc, double amount) {\n    acc->balance += amount;\n}\n\nvoid withdraw(BankAccount* acc, double amount) {\n    if (acc->balance >= amount) {\n        acc->balance -= amount;\n    } else {\n        printf(\"Insufficient funds.\\n\");\n        fflush(stdout);\n    }\n}\n\nvoid print(BankAccount* acc) {\n    printf(\"Account #%d, Balance: %.2f\\n\", acc->accountNumber, acc->balance);\n    fflush(stdout);\n}\n\nBankAccount createAccount(int accountNumber, double initialBalance) {\n    BankAccount acc = {accountNumber, initialBalance, deposit, withdraw, print};\n    return acc;\n}\n\nint main() {\n    BankAccount acc = createAccount(12345, 100.0);\n    char command[20];\n    double amount;\n\n    while (1) { char input[100]; if (fgets(input, sizeof(input), stdin) == NULL) break; if (sscanf(input, \"%s\", command) != 1) continue; if (strcmp(command, \"deposit\") == 0 || strcmp(command, \"withdraw\") == 0 || strcmp(command, \"print\") == 0 || strcmp(command, \"exit\") == 0) { {\n        if (strcmp(command, \"deposit\") == 0) { double amount; if (scanf(\"%lf\", &amount) != 1) { while (getchar() != '\\n'); continue; } acc.deposit(&acc, amount); } else if (strcmp(command, \"withdraw\") == 0) { double amount; if (scanf(\"%lf\", &amount) != 1) { while (getchar() != '\\n'); continue; } acc.withdraw(&acc, amount); } else if (strcmp(command, \"print\") == 0) { acc.print(&acc); } else if (strcmp(command, \"exit\") == 0) { break; }\n\n            scanf(\"%lf\", &amount);\n            acc.deposit(&acc, amount);\n        } else if (strcmp(command, \"withdraw\") == 0) {\n            scanf(\"%lf\", &amount);\n            acc.withdraw(&acc, amount);\n        } else if (strcmp(command, \"print\") == 0) {\n            acc.print(&acc);\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        }\n\n    }\n\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct BankAccount {\n    int accountNumber;\n    double balance;\n    void (*deposit)(struct BankAccount*, double);\n    void (*withdraw)(struct BankAccount*, double);\n    void (*print)(struct BankAccount*);\n} BankAccount;\n\nvoid deposit(BankAccount* acc, double amount) {\n    acc->balance += amount;\n}\n\nvoid withdraw(BankAccount* acc, double amount) {\n    if (acc->balance >= amount) {\n        acc->balance -= amount;\n    } else {\n        printf(\"Insufficient funds.\\n\");\n        fflush(stdout);\n    }\n}\n\nvoid print(BankAccount* acc) {\n    printf(\"Account #%d, Balance: %.2f\\n\", acc->accountNumber, acc->balance);\n    fflush(stdout);\n}\n\nBankAccount createAccount(int accountNumber, double initialBalance) {\n    BankAccount acc = {accountNumber, initialBalance, deposit, withdraw, print};\n    return acc;\n}\n\nint main() {\n    BankAccount acc = createAccount(12345, 100.0);\n    char command[20];\n    double amount;\n\n    while (1) { printf(\"Enter command (deposit/withdraw/print/exit): \"); fflush(stdout); if (scanf(\"%s\", command) != 1) { printf(\"Invalid command.\\n\"); fflush(stdout); continue; } {\n        if (strcmp(command, \"deposit\") == 0) { printf(\"Enter deposit amount: \"); fflush(stdout); while (1) { if (scanf(\"%lf\", &amount) != 1 || amount <= 0) { printf(\"Invalid amount.\\n\"); fflush(stdout); continue; } break; }\n\n            scanf(\"%lf\", &amount);\n            acc.deposit(&acc, amount);\n        } else if (strcmp(command, \"withdraw\") == 0) { printf(\"Enter withdraw amount: \"); fflush(stdout); while (1) { if (scanf(\"%lf\", &amount) != 1 || amount <= 0) { printf(\"Invalid amount.\\n\"); fflush(stdout); continue; } break; }\n            scanf(\"%lf\", &amount);\n            acc.withdraw(&acc, amount);\n        } else if (strcmp(command, \"print\") == 0) {\n            acc.print(&acc);\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        }\n\n    }\n\n    return 0;\n}",
            "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct BankAccount {\n    int accountNumber;\n    double balance;\n    void (*deposit)(struct BankAccount*, double);\n    void (*withdraw)(struct BankAccount*, double);\n    void (*print)(struct BankAccount*);\n} BankAccount;\n\nvoid deposit(BankAccount* acc, double amount) {\n    acc->balance += amount;\n}\n\nvoid withdraw(BankAccount* acc, double amount) {\n    if (acc->balance >= amount) {\n        acc->balance -= amount;\n    } else {\n        printf(\"Insufficient funds.\\n\");\n        fflush(stdout);\n    }\n}\n\nvoid print(BankAccount* acc) {\n    printf(\"Account #%d, Balance: %.2f\\n\", acc->accountNumber, acc->balance);\n    fflush(stdout);\n}\n\nBankAccount createAccount(int accountNumber, double initialBalance) {\n    BankAccount acc = {accountNumber, initialBalance, deposit, withdraw, print};\n    return acc;\n}\n\nint main() {\n    BankAccount acc = createAccount(12345, 100.0);\n    char command[20];\n    double amount;\n\n    while (1) { {\n        if (strcmp(command, \"deposit\") == 0) {\n\n            scanf(\"%lf\", &amount);\n            acc.deposit(&acc, amount);\n        } else if (strcmp(command, \"withdraw\") == 0) {\n            scanf(\"%lf\", &amount);\n            acc.withdraw(&acc, amount);\n        } else if (strcmp(command, \"print\") == 0) {\n            acc.print(&acc);\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        }\n\n    }\n\n    return 0;\n}"
        ]
    },
    {
        "test_module": "008",
        "language": "cpp",
        "category": "NA",
        "description": "NA",
        "filename": "008.cpp",
        "code": [
            "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n    virtual double area() = 0;\n    virtual ~Shape() {}\n};\n\nclass Rectangle : public Shape {\n    double width, height;\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n    double area() override {\n        return width * height;\n    }\n};\n\nclass Circle : public Shape {\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() override {\n        return 3.14159 * radius * radius;\n    }\n};\n\nint main() {\n    Shape* rect = new Rectangle(4.0, 5.0);\n    Shape* circ = new Circle(3.0);\n    cout << \"Rectangle area: \" << rect->area() << endl;\n    cout << \"Circle area: \" << circ->area() << endl;\n    delete rect;\\n    delete circ;\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n    virtual double area() = 0;\n    virtual ~Shape() {}\n};\n\nclass Rectangle : public Shape {\n    double width, height;\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n    double area() override {\n        return width * height;\n    }\n};\n\nclass Circle : public Shape {\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() override {\n        return 3.14159 * radius * radius;\n    }\n};\n\nint main() {\n    Shape* rect = new Rectangle(4.0, 5.0);\n    Shape* circ = new Circle(3.0);\n    cout << \"Rectangle area: \" << rect->area() << endl;\n    cout << \"Circle area: \" << circ->area() << endl;\n    delete rect;\\ndelete circ;\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n    virtual double area() = 0;\n    virtual ~Shape() {}\n};\n\nclass Rectangle : public Shape {\n    double width, height;\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n    double area() override {\n        return width * height;\n    }\n};\n\nclass Circle : public Shape {\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() override {\n        return 3.14159 * radius * radius;\n    }\n};\n\nint main() {\n    Shape* rect = new Rectangle(4.0, 5.0);\n    Shape* circ = new Circle(3.0);\n    cout << \"Rectangle area: \" << rect->area() << endl;\n    cout << \"Circle area: \" << circ->area() << endl;\n    delete rect;\n    delete circ;\\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n    virtual double area() = 0;\n    virtual ~Shape() {}\n};\n\nclass Rectangle : public Shape {\n    double width, height;\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n    double area() override {\n        return width * height;\n    }\n};\n\nclass Circle : public Shape {\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() override {\n        return 3.14159 * radius * radius;\n    }\n};\n\nint main() {\n    Shape* rect = new Rectangle(4.0, 5.0);\n    Shape* circ = new Circle(3.0);\n    cout << \"Rectangle area: \" << rect->area() << endl;\n    cout << \"Circle area: \" << circ->area() << endl;\n    delete rect;\\n    delete circ;\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n    virtual double area() = 0;\n    virtual ~Shape() {}\n};\n\nclass Rectangle : public Shape {\n    double width, height;\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n    double area() override {\n        return width * height;\n    }\n};\n\nclass Circle : public Shape {\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() override {\n        return 3.14159 * radius * radius;\n    }\n};\n\nint main() {\n    Shape* rect = new Rectangle(4.0, 5.0);\n    Shape* circ = new Circle(3.0);\n    cout << \"Rectangle area: \" << rect->area() << endl;\n    cout << \"Circle area: \" << circ->area() << endl;\n    delete rect;\\n    delete circ;\n    return 0;\n}"
        ]
    },
    {
        "test_module": "009",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "AuditLogger.java",
        "code": [
            "// Filename: AuditLogger.java\n\nclass Event {\n    String username;\n    String action;\n\n    public Event(String username, String action) {\n        this.username = username;\n        this.action = action;\n    }\n}\n\nclass AuditEntry extends Event {\n    public AuditEntry(String username, String action) {\n        super(username, action);\n    }\n\n    public String log() {\n        return username + \"-\" + action;\n    }\n}\n\npublic class AuditLogger {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuditLogger <username> <action>\");\n            return;\n        }\n        String user = args[0];\n        String act = args[1];\n        AuditEntry entry = new AuditEntry(user, act);\n        System.out.println(entry.log());\n    }\n}",
            "// Filename: AuditLogger.java\n\nclass Event {\n    String username;\n    String action;\n\n    public Event(String username, String action) {\n        this.username = username;\n        this.action = action;\n    }\n}\n\nclass AuditEntry extends Event {\n    public AuditEntry(String username, String action) {\n        super(username, action);\n    }\n\n    public String log() {\n        return username + \"_\" + action;\n    }\n}\n\npublic class AuditLogger {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuditLogger <username> <action>\");\n            return;\n        }\n        String user = args[0];\n        String act = args[1];\n        AuditEntry entry = new AuditEntry(user, act);\n        System.out.println(entry.log());\n    }\n}",
            "// Filename: AuditLogger.java\n\nclass Event {\n    String username;\n    String action;\n\n    public Event(String username, String action) {\n        this.username = username;\n        this.action = action;\n    }\n}\n\nclass AuditEntry extends Event {\n    public AuditEntry(String username, String action) {\n        super(username, action);\n    }\n\n    public String log() {\n        return username + \":\" + action.replace(\":\", \"::\");\n    }\n}\n\npublic class AuditLogger {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuditLogger <username> <action>\");\n            return;\n        }\n        String user = args[0];\n        String act = args[1];\n        AuditEntry entry = new AuditEntry(user, act);\n        System.out.println(entry.log());\n    }\n}",
            "// Filename: AuditLogger.java\n\nclass Event {\n    String username;\n    String action;\n\n    public Event(String username, String action) {\n        this.username = username;\n        this.action = action;\n    }\n}\n\nclass AuditEntry extends Event {\n    public AuditEntry(String username, String action) {\n        super(username, action);\n    }\n\n    public String log() {\n        return username + \":\" + action.replace(\":\", \"::\");\n    }\n}\n\npublic class AuditLogger {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuditLogger <username> <action>\");\n            return;\n        }\n        String user = args[0];\n        String act = args[1];\n        AuditEntry entry = new AuditEntry(user, act);\n        System.out.println(entry.log());\n    }\n}",
            "// Filename: AuditLogger.java\n\nclass Event {\n    String username;\n    String action;\n\n    public Event(String username, String action) {\n        this.username = username;\n        this.action = action;\n    }\n}\n\nclass AuditEntry extends Event {\n    public AuditEntry(String username, String action) {\n        super(username, action);\n    }\n\n    public String log() {\n        return username + \";\" + action;\n    }\n}\n\npublic class AuditLogger {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuditLogger <username> <action>\");\n            return;\n        }\n        String user = args[0];\n        String act = args[1];\n        AuditEntry entry = new AuditEntry(user, act);\n        System.out.println(entry.log());\n    }\n}"
        ]
    },
    {
        "test_module": "010",
        "language": "c",
        "category": "NA",
        "description": "NA",
        "filename": "010.c",
        "code": [
            "#include <stdio.h>\n#include <string.h>\n\ntypedef struct Employee {\n    char name[50];\n    double hoursWorked;\n    double hourlyRate;\n    double (*calculatePay)(struct Employee*);\n} Employee;\n\ndouble calculatePay(Employee* emp) {\n    return emp->hoursWorked * emp->hourlyRate;\n}\n\nint main() {\n    char name[50];\n    double hours, rate;\n\n    while (scanf(\"%49s %lf %lf\", name, &hours, &rate) == 3) {\n        Employee emp;\n        strncpy(emp.name, name, sizeof(emp.name) - 1);\n        emp.name[sizeof(emp.name) - 1] = '\\0';\n\n        emp.hoursWorked = hours >= 0 ? hours : 0;\n        emp.hourlyRate = rate;\n        emp.calculatePay = calculatePay;\n\n        printf(\"Pay for %s: %.2f\\n\", emp.name, emp.calculatePay(&emp));\n    }\n    return 0;\n}",
            "#include <stdio.h>\n#include <string.h>\n\ntypedef struct Employee {\n    char name[50];\n    double hoursWorked;\n    double hourlyRate;\n    double (*calculatePay)(struct Employee*);\n} Employee;\n\ndouble calculatePay(Employee* emp) {\n    return emp->hoursWorked * emp->hourlyRate;\n}\n\nint main() {\n    char name[50];\n    double hours, rate;\n\n    while (scanf(\"%49s %lf %lf\", name, &hours, &rate) == 3) {\n        Employee emp;\n        strncpy(emp.name, name, sizeof(emp.name) - 1);\n        emp.name[sizeof(emp.name) - 1] = '\\0';\n\n        if (hours > 0) { emp.hoursWorked = hours; } else { printf(\"Error: hoursWorked must be positive\\n\"); continue; }\n        if (rate > 0) { emp.hourlyRate = rate; } else { printf(\"Error: hourlyRate must be positive\\n\"); continue; }\n        emp.calculatePay = calculatePay;\n\n        printf(\"Pay for %s: %.2f\\n\", emp.name, emp.calculatePay(&emp));\n    }\n    return 0;\n}",
            "#include <stdio.h>\n#include <string.h>\n\ntypedef struct Employee {\n    char name[50];\n    double hoursWorked;\n    double hourlyRate;\n    double (*calculatePay)(struct Employee*);\n} Employee;\n\ndouble calculatePay(Employee* emp) {\n    return emp->hoursWorked * emp->hourlyRate;\n}\n\nint main() {\n    char name[50];\n    double hours, rate;\n\n    while (scanf(\"%49s %lf %lf\", name, &hours, &rate) == 3 && hours > 0 && rate > 0) {\n        Employee emp;\n        strncpy(emp.name, name, sizeof(emp.name) - 1);\n        emp.name[sizeof(emp.name) - 1] = '\\0';\n\n        emp.hoursWorked = hours;\n        emp.hourlyRate = rate;\n        emp.calculatePay = calculatePay;\n\n        printf(\"Pay for %s: %.2f\\n\", emp.name, emp.calculatePay(&emp));\n    }\n    return 0;\n}",
            "  Timeout exceeded for run 4",
            "#include <stdio.h>\n#include <string.h>\n\ntypedef struct Employee {\n    char name[50];\n    double hoursWorked;\n    double hourlyRate;\n    double (*calculatePay)(struct Employee*);\n} Employee;\n\ndouble calculatePay(Employee* emp) {\n    return emp->hoursWorked * emp->hourlyRate;\n}\n\nint main() {\n    char name[50];\n    double hours, rate;\n\n    while (scanf(\"%49s %lf %lf\", name, &hours, &rate) == 3) {\n        Employee emp;\n        strncpy(emp.name, name, sizeof(emp.name) - 1);\n        emp.name[sizeof(emp.name) - 1] = '\\0';\n\n        if (hours <= 0) { printf(\"Error: Hours worked must be positive\\n\"); continue; } emp.hoursWorked = hours;\n        if (rate <= 0) { printf(\"Error: Hourly rate must be positive\\n\"); continue; } emp.hourlyRate = rate;\n        emp.calculatePay = calculatePay;\n\n        printf(\"Pay for %s: %.2f\\n\", emp.name, emp.calculatePay(&emp));\n    }\n    return 0;\n}"
        ]
    },
    {
        "test_module": "011",
        "language": "cpp",
        "category": "NA",
        "description": "NA",
        "filename": "011.cpp",
        "code": [
            "#include <iostream>\nusing namespace std;\n\nclass Person {\n    string name;\npublic:\n    Person(string n) { name = n;\n    }\n    void sayName() {\n        cout << \"Name is: \" << name << endl;\n    }\n};\n\nint main() {\n    Person p(\"Alice\");\n    p.sayName();\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Person {\n    string name;\npublic:\n    Person(string n) { name = n;\n    }\n    void sayName() {\n        cout << \"Name is: \" << name << endl;\n    }\n};\n\nint main() {\n    Person p(\"Alice\");\n    p.sayName();\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Person {\n    string name;\npublic:\n    Person(string n) { name = n;\n    }\n    void sayName() {\n        cout << \"Name is: \" << name << endl;\n    }\n};\n\nint main() {\n    Person p(\"Alice\");\n    p.sayName();\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Person {\n    string name;\npublic:\n    Person(string n) : name(n) {\n    }\n    void sayName() {\n        cout << \"Name is: \" << name << endl;\n    }\n};\n\nint main() {\n    Person p(\"Alice\");\n    p.sayName();\n}",
            "#include <iostream>\nusing namespace std;\n\nclass Person {\n    string name;\npublic:\n    Person(string n) : name(n) {\n    }\n    void sayName() {\n        cout << \"Name is: \" << name << endl;\n    }\n};\n\nint main() {\n    Person p(\"Alice\");\n    p.sayName();\n}"
        ]
    },
    {
        "test_module": "012",
        "language": "java",
        "category": "NA",
        "description": "NA",
        "filename": "AuthenticationSystem.java",
        "code": [
            "  Timeout exceeded for run 1",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    \n    \n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return true;\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = System.getenv(\"VALID_USERNAME\");\n    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return username.equals(VALID_USERNAME) && password.equals(VALID_PASSWORD);\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\\n        this.username = username;\\n        this.password = password;\\n    }\\n\\n    public boolean authenticateUser(String username, String password) {\\n        return this.username.equals(username) && this.password.equals(password);\\n    }\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = \"password123\";\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return authenticateUser(username, password);\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
            "class User {\n    String username;\n    String password;\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\nclass Authenticator extends User {\n    private static final String VALID_USERNAME = \"admin\";\n    private static final String VALID_PASSWORD = System.getenv(\"VALID_PASSWORD\");\n\n    public Authenticator(String username, String password) {\n        super(username, password);\n    }\n\n    public boolean authenticate() {\n        return username.equals(VALID_USERNAME) && password.equals(VALID_PASSWORD);\n    }\n}\n\npublic class AuthenticationSystem {\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java AuthenticationSystem <username> <password>\");\n            return;\n        }\n        String user = args[0];\n        String pass = args[1];\n        Authenticator auth = new Authenticator(user, pass);\n        if (auth.authenticate()) {\n            System.out.println(\"Access Granted\");\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}"
        ]
    }]
    