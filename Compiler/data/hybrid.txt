//Jes�s Enrique D�az Bernal Robinson Bours - A00227255
#include <iostream>

using namespace std;

// Node structure which contains a number and 2 pointers, one to the previous node and one to the next node
struct Node{
    int val;
    Node *prev, *next;
};

//Function that inserts a node at the beginning
Node* insert_node_start(Node *head, int val){
    Node *new_node = new Node();
    new_node->val = val;
    new_node->prev = new_node->next = NULL;

    if(!head){
        return new_node;
    }

    new_node->next = head;
    head->prev = new_node;
    return new_node;
}

//Function that inserts a node at the end
Node* insert_node_end(Node *head, int val){
    Node *new_node = new Node();
    new_node->val = val;
    new_node->prev = new_node->next = NULL;

    if(!head){
        return new_node;
    }

    Node *curr = head;
    while(curr->next != NULL){
        curr = curr->next;
    }
    curr->next = new_node;
    new_node->prev = curr;
    return new_node;
}


//Function that searches for a a value in the nodes and returns the first node with the value
Node* search(Node *head, int val){
    if(!head){
        cout << "List is empty!" << endl;;
        return NULL;
    }
    Node *curr = head;
    while(curr->val != val){
        if (curr->next == NULL){
            cout << "Value not found" << endl;
            return NULL;
        }
        else{
            curr = curr->next;
        }
    }
    return curr;
}

//Function that inserts a node after another one
Node* insert_node_after(Node *head, int val, int value_after){
    Node *new_node = new Node();
    new_node->val = val;
    new_node->prev = new_node->next = NULL;

    if(!head){
        return new_node;
    }
    Node *curr = search(head, value_after);
    //head;
    //while(curr->val != value_after){
    //    curr = curr->next;
    //}
    if (curr){
        new_node->prev = curr;
        new_node->next = curr->next;
        curr->next->prev = new_node;
        curr->next = new_node;
        return new_node;
    }
    else{
        return NULL;
    }
}

//Function that changes tha value of a node
void update(Node *head, int val, int val_replace){
    Node *replacing = search(head, val);
    if (replacing){
        replacing->val = val_replace;
    }
}

//Function that deletes a node
void Del(Node *head, int val){

    Node *curr = search(head, val);

    if(curr){
        curr->prev->next = curr->next;
        curr->next->prev = curr->prev;
        free(curr);
    }
}

//Function that prints the double linked list
void print_double_linked_list(Node *head){
    cout << "NULL <- ";
    for(Node *curr = head;curr;){
        cout << curr->val << " <-> ";
        curr = curr->next;
    }
    cout << " NULL" << endl;
}

int main(){
    //Define a head
    Node *head = NULL;
    //Insert head at the start
    head = insert_node_start(head, 10);
    print_double_linked_list(head);
    //Insert a node at the start (change head)
    head = insert_node_start(head, 20);
    print_double_linked_list(head);
    //Insert node at the end
    insert_node_end(head, 30);
    print_double_linked_list(head);
    //Insert node after another one
    insert_node_after(head, 25, 20);
    print_double_linked_list(head);
    //Search for a node (not found)
    Node *searched = search(head, 40);
    //Search for a node
    searched = search(head, 25);
    if(searched){
        cout << searched->val << endl;
    }
    //Changes a node with 25 to 35
    update(head, 25, 35);
    print_double_linked_list(head);
    //Delete the node with 35
    Del(head,35);
    print_double_linked_list(head);

    return(0);
}